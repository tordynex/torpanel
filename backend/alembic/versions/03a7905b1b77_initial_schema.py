"""initial schema

Revision ID: 03a7905b1b77
Revises: 
Create Date: 2025-09-07 15:00:32.350094

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '03a7905b1b77'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""

    op.execute("CREATE EXTENSION IF NOT EXISTS btree_gist")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cars',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('registration_number', sa.String(), nullable=False),
    sa.Column('brand', sa.String(), nullable=False),
    sa.Column('model_year', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('registration_number')
    )
    op.create_index('ix_car_regnr', 'cars', ['registration_number'], unique=False)
    op.create_index(op.f('ix_cars_id'), 'cars', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('role', sa.Enum('owner', 'workshop_user', 'workshop_employee', name='userrole'), server_default='workshop_user', nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('workshops',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('phone', sa.String(), nullable=False),
    sa.Column('website', sa.String(), nullable=True),
    sa.Column('street_address', sa.String(), nullable=False),
    sa.Column('postal_code', sa.String(), nullable=False),
    sa.Column('city', sa.String(), nullable=False),
    sa.Column('country', sa.String(), nullable=False),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('org_number', sa.String(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('autonexo', sa.Boolean(), nullable=True),
    sa.Column('opening_hours', sa.String(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_index(op.f('ix_workshops_id'), 'workshops', ['id'], unique=False)
    op.create_table('customers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('workshop_id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('last_workshop_visited', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['workshop_id'], ['workshops.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('workshop_id', 'email', name='uq_customer_workshop_email'),
    sa.UniqueConstraint('workshop_id', 'phone', name='uq_customer_workshop_phone')
    )
    op.create_index('ix_customer_workshop', 'customers', ['workshop_id'], unique=False)
    op.create_index(op.f('ix_customers_id'), 'customers', ['id'], unique=False)
    op.create_index(op.f('ix_customers_workshop_id'), 'customers', ['workshop_id'], unique=False)
    op.create_table('servicelogs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('work_performed', sa.String(), nullable=True),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('mileage', sa.Integer(), nullable=False),
    sa.Column('car_id', sa.Integer(), nullable=True),
    sa.Column('workshop_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['car_id'], ['cars.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workshop_id'], ['workshops.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_servicelogs_id'), 'servicelogs', ['id'], unique=False)
    op.create_table('sms_messages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('workshop_id', sa.Integer(), nullable=False),
    sa.Column('to_phone', sa.String(), nullable=False),
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('provider', sa.String(), nullable=True),
    sa.Column('provider_message_id', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('QUEUED', 'SENT', 'DELIVERED', 'FAILED', 'REJECTED', name='smsstatus'), nullable=False),
    sa.Column('error_message', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('delivered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('upsell_offer_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['workshop_id'], ['workshops.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sms_messages_to_phone'), 'sms_messages', ['to_phone'], unique=False)
    op.create_index(op.f('ix_sms_messages_workshop_id'), 'sms_messages', ['workshop_id'], unique=False)
    op.create_table('user_time_off',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('start_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('type', sa.Enum('vacation', 'sick', 'training', 'other', name='timeofftype', native_enum=False, create_constraint=True), server_default='vacation', nullable=False),
    sa.Column('reason', sa.String(), nullable=True),
    sa.CheckConstraint('end_at > start_at', name='ck_user_timeoff_order'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_time_off_end_at'), 'user_time_off', ['end_at'], unique=False)
    op.create_index(op.f('ix_user_time_off_start_at'), 'user_time_off', ['start_at'], unique=False)
    op.create_index(op.f('ix_user_time_off_user_id'), 'user_time_off', ['user_id'], unique=False)
    op.create_index('ix_user_timeoff_user_time', 'user_time_off', ['user_id', 'start_at', 'end_at'], unique=False)
    op.create_table('user_working_hours',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('weekday', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('valid_from', sa.Date(), nullable=True),
    sa.Column('valid_to', sa.Date(), nullable=True),
    sa.CheckConstraint('end_time > start_time', name='ck_uwh_time_order'),
    sa.CheckConstraint('weekday >= 0 AND weekday <= 6', name='ck_uwh_weekday'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_working_hours_user_id'), 'user_working_hours', ['user_id'], unique=False)
    op.create_index('ix_uwh_user_weekday', 'user_working_hours', ['user_id', 'weekday'], unique=False)
    op.create_table('user_workshop_association',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('workshop_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workshop_id'], ['workshops.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'workshop_id')
    )
    op.create_table('vehicleprofiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('car_id', sa.Integer(), nullable=False),
    sa.Column('vehicle_class', sa.Enum('motorcycle', 'small_car', 'sedan', 'suv', 'van', 'pickup', 'light_truck', name='vehicleclass_profile', native_enum=False, create_constraint=True), nullable=False),
    sa.Column('length_mm', sa.Integer(), nullable=True),
    sa.Column('width_mm', sa.Integer(), nullable=True),
    sa.Column('height_mm', sa.Integer(), nullable=True),
    sa.Column('weight_kg', sa.Integer(), nullable=True),
    sa.Column('extra_notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['car_id'], ['cars.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('car_id')
    )
    op.create_table('workshop_service_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('workshop_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('vehicle_class', sa.Enum('motorcycle', 'small_car', 'sedan', 'suv', 'van', 'pickup', 'light_truck', name='vehicleclass_serviceitem', native_enum=False, create_constraint=True), nullable=True),
    sa.Column('price_type', sa.Enum('hourly', 'fixed', name='servicepricetype', native_enum=False, create_constraint=True), nullable=True),
    sa.Column('hourly_rate_ore', sa.Integer(), nullable=True),
    sa.Column('fixed_price_ore', sa.Integer(), nullable=True),
    sa.Column('vat_percent', sa.Integer(), nullable=True),
    sa.Column('request_only', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('default_duration_min', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default='true', nullable=False),
    sa.CheckConstraint("(request_only = true) OR ( (price_type = 'hourly' AND hourly_rate_ore IS NOT NULL AND fixed_price_ore IS NULL)  OR  (price_type = 'fixed'  AND fixed_price_ore  IS NOT NULL AND hourly_rate_ore  IS NULL))", name='ck_service_item_price_consistency'),
    sa.CheckConstraint('vat_percent IS NULL OR (vat_percent >= 0 AND vat_percent <= 100)', name='ck_vat_range'),
    sa.ForeignKeyConstraint(['workshop_id'], ['workshops.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('workshop_id', 'name', name='uq_service_item_workshop_name')
    )
    op.create_index('ix_service_item_workshop', 'workshop_service_items', ['workshop_id'], unique=False)
    op.create_index(op.f('ix_workshop_service_items_id'), 'workshop_service_items', ['id'], unique=False)
    op.create_index(op.f('ix_workshop_service_items_workshop_id'), 'workshop_service_items', ['workshop_id'], unique=False)
    op.create_table('workshopbays',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('workshop_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('bay_type', sa.Enum('two_post_lift', 'four_post_lift', 'floor_space', 'alignment_rack', 'diagnosis', 'mot_bay', name='baytype', native_enum=False, create_constraint=True), nullable=False),
    sa.Column('max_length_mm', sa.Integer(), nullable=True),
    sa.Column('max_width_mm', sa.Integer(), nullable=True),
    sa.Column('max_height_mm', sa.Integer(), nullable=True),
    sa.Column('max_weight_kg', sa.Integer(), nullable=True),
    sa.Column('allow_overnight', sa.Boolean(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['workshop_id'], ['workshops.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('workshop_id', 'name', name='uq_workshopbay_workshop_name')
    )
    op.create_index('ix_workshopbay_workshop', 'workshopbays', ['workshop_id'], unique=False)
    op.create_index(op.f('ix_workshopbays_id'), 'workshopbays', ['id'], unique=False)
    op.create_table('baybookings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('workshop_id', sa.Integer(), nullable=False),
    sa.Column('bay_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('start_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('buffer_before_min', sa.Integer(), nullable=False),
    sa.Column('buffer_after_min', sa.Integer(), nullable=False),
    sa.Column('price_net_ore', sa.Integer(), nullable=True),
    sa.Column('price_gross_ore', sa.Integer(), nullable=True),
    sa.Column('vat_percent', sa.Integer(), nullable=True),
    sa.Column('price_note', sa.String(), nullable=True),
    sa.Column('price_is_custom', sa.Boolean(), nullable=True),
    sa.Column('final_price_ore', sa.Integer(), nullable=True),
    sa.Column('price_type', sa.String(), nullable=True),
    sa.Column('chain_token', sa.String(), nullable=True),
    sa.Column('service_item_id', sa.Integer(), nullable=True),
    sa.Column('actual_minutes_spent', sa.Integer(), nullable=True),
    sa.Column('billed_from_time', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('status', sa.Enum('booked', 'in_progress', 'completed', 'cancelled', 'no_show', name='bookingstatus', native_enum=False, create_constraint=True), server_default='booked', nullable=False),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.Column('car_id', sa.Integer(), nullable=True),
    sa.Column('service_log_id', sa.Integer(), nullable=True),
    sa.Column('assigned_user_id', sa.Integer(), nullable=True),
    sa.Column('source', sa.String(), nullable=True),
    postgresql.ExcludeConstraint((sa.column('assigned_user_id'), '='), (sa.text('tstzrange(least(start_at, end_at), greatest(start_at, end_at))'), '&&'), where=sa.text('assigned_user_id IS NOT NULL'), using='gist', name='excl_user_double_book'),
    postgresql.ExcludeConstraint((sa.column('bay_id'), '='), (sa.text('tstzrange(least(start_at, end_at), greatest(start_at, end_at))'), '&&'), using='gist', name='excl_bay_double_book'),
    sa.CheckConstraint('(price_net_ore IS NULL OR price_net_ore >= 0) AND (price_gross_ore IS NULL OR price_gross_ore >= 0) AND (final_price_ore IS NULL OR final_price_ore >= 0)', name='ck_booking_price_nonneg'),
    sa.CheckConstraint('actual_minutes_spent IS NULL OR actual_minutes_spent >= 0', name='ck_booking_actual_minutes_nonneg'),
    sa.CheckConstraint('end_at > start_at', name='ck_booking_time_order'),
    sa.CheckConstraint('vat_percent IS NULL OR (vat_percent >= 0 AND vat_percent <= 100)', name='ck_booking_vat_range'),
    sa.ForeignKeyConstraint(['assigned_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['bay_id'], ['workshopbays.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['car_id'], ['cars.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['service_item_id'], ['workshop_service_items.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['service_log_id'], ['servicelogs.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['workshop_id'], ['workshops.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_baybooking_bay_time', 'baybookings', ['bay_id', 'start_at', 'end_at'], unique=False)
    op.create_index('ix_baybooking_chain_token', 'baybookings', ['chain_token'], unique=False)
    op.create_index('ix_baybooking_workshop_time', 'baybookings', ['workshop_id', 'start_at', 'end_at'], unique=False)
    op.create_index(op.f('ix_baybookings_chain_token'), 'baybookings', ['chain_token'], unique=False)
    op.create_index(op.f('ix_baybookings_end_at'), 'baybookings', ['end_at'], unique=False)
    op.create_index(op.f('ix_baybookings_id'), 'baybookings', ['id'], unique=False)
    op.create_index(op.f('ix_baybookings_service_item_id'), 'baybookings', ['service_item_id'], unique=False)
    op.create_index(op.f('ix_baybookings_start_at'), 'baybookings', ['start_at'], unique=False)
    op.create_table('bayclosures',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('bay_id', sa.Integer(), nullable=False),
    sa.Column('start_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('reason', sa.String(), nullable=True),
    sa.CheckConstraint('end_at > start_at', name='ck_closure_time_order'),
    sa.ForeignKeyConstraint(['bay_id'], ['workshopbays.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_bayclosure_bay_time', 'bayclosures', ['bay_id', 'start_at', 'end_at'], unique=False)
    op.create_index(op.f('ix_bayclosures_end_at'), 'bayclosures', ['end_at'], unique=False)
    op.create_index(op.f('ix_bayclosures_id'), 'bayclosures', ['id'], unique=False)
    op.create_index(op.f('ix_bayclosures_start_at'), 'bayclosures', ['start_at'], unique=False)
    op.create_table('booking_requests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('workshop_id', sa.Integer(), nullable=False),
    sa.Column('service_item_id', sa.Integer(), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.Column('car_id', sa.Integer(), nullable=True),
    sa.Column('registration_number', sa.String(), nullable=True),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('open', 'handled', 'converted_to_booking', name='bookingrequeststatus', native_enum=False, create_constraint=True), server_default='open', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('(customer_id IS NOT NULL) OR (email IS NOT NULL OR phone IS NOT NULL)', name='ck_bookingreq_contact_available'),
    sa.ForeignKeyConstraint(['car_id'], ['cars.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['service_item_id'], ['workshop_service_items.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['workshop_id'], ['workshops.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_booking_requests_car_id'), 'booking_requests', ['car_id'], unique=False)
    op.create_index(op.f('ix_booking_requests_created_at'), 'booking_requests', ['created_at'], unique=False)
    op.create_index(op.f('ix_booking_requests_customer_id'), 'booking_requests', ['customer_id'], unique=False)
    op.create_index(op.f('ix_booking_requests_id'), 'booking_requests', ['id'], unique=False)
    op.create_index(op.f('ix_booking_requests_service_item_id'), 'booking_requests', ['service_item_id'], unique=False)
    op.create_index(op.f('ix_booking_requests_workshop_id'), 'booking_requests', ['workshop_id'], unique=False)
    op.create_index('ix_bookingreq_workshop_status_created', 'booking_requests', ['workshop_id', 'status', 'created_at'], unique=False)
    op.create_table('customer_cars',
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('car_id', sa.Integer(), nullable=False),
    sa.Column('is_primary_owner', sa.Boolean(), server_default='true', nullable=False),
    sa.Column('valid_from', sa.Date(), nullable=True),
    sa.Column('valid_to', sa.Date(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.CheckConstraint('valid_to IS NULL OR valid_from IS NULL OR valid_to >= valid_from', name='ck_cc_valid_range'),
    sa.ForeignKeyConstraint(['car_id'], ['cars.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('customer_id', 'car_id')
    )
    op.create_index('ix_cc_car', 'customer_cars', ['car_id'], unique=False)
    op.create_index('ix_cc_customer', 'customer_cars', ['customer_id'], unique=False)
    op.create_table('servicetasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('service_log_id', sa.Integer(), nullable=True),
    sa.Column('catalog_item_id', sa.Integer(), nullable=True),
    sa.Column('hours', sa.Float(), nullable=True),
    sa.Column('quantity', sa.Float(), nullable=True),
    sa.Column('unit_price_ore', sa.Integer(), nullable=True),
    sa.Column('line_total_ore', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['catalog_item_id'], ['workshop_service_items.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['service_log_id'], ['servicelogs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_servicetasks_catalog_item_id'), 'servicetasks', ['catalog_item_id'], unique=False)
    op.create_index(op.f('ix_servicetasks_id'), 'servicetasks', ['id'], unique=False)
    op.create_index(op.f('ix_servicetasks_service_log_id'), 'servicetasks', ['service_log_id'], unique=False)
    op.create_table('workshopbay_vehicleclass',
    sa.Column('bay_id', sa.Integer(), nullable=False),
    sa.Column('vehicle_class', sa.Enum('motorcycle', 'small_car', 'sedan', 'suv', 'van', 'pickup', 'light_truck', name='vehicleclass', native_enum=False, create_constraint=True), nullable=False),
    sa.ForeignKeyConstraint(['bay_id'], ['workshopbays.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('bay_id', 'vehicle_class')
    )
    op.create_table('booking_request_service_items',
    sa.Column('booking_request_id', sa.Integer(), nullable=False),
    sa.Column('service_item_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['booking_request_id'], ['booking_requests.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_item_id'], ['workshop_service_items.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('booking_request_id', 'service_item_id'),
    sa.UniqueConstraint('booking_request_id', 'service_item_id', name='uq_br_serviceitem')
    )
    op.create_table('upsell_offers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('workshop_id', sa.Integer(), nullable=False),
    sa.Column('booking_id', sa.Integer(), nullable=False),
    sa.Column('service_log_id', sa.Integer(), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.Column('car_id', sa.Integer(), nullable=True),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('recommendation', sa.Text(), nullable=True),
    sa.Column('sms_body', sa.Text(), nullable=False),
    sa.Column('price_gross_ore', sa.Integer(), nullable=False),
    sa.Column('vat_percent', sa.Integer(), nullable=True),
    sa.Column('currency', sa.String(), nullable=False),
    sa.Column('approval_token', sa.String(), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'PENDING', 'ACCEPTED', 'DECLINED', 'EXPIRED', 'CANCELLED', name='upsellstatus'), nullable=False),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('responded_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by_user_id', sa.Integer(), nullable=True),
    sa.Column('cancelled_by_user_id', sa.Integer(), nullable=True),
    sa.Column('last_sms_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['baybookings.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['cancelled_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['car_id'], ['cars.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_sms_id'], ['sms_messages.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['service_log_id'], ['servicelogs.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['workshop_id'], ['workshops.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_upsell_offers_approval_token'), 'upsell_offers', ['approval_token'], unique=True)
    op.create_index(op.f('ix_upsell_offers_booking_id'), 'upsell_offers', ['booking_id'], unique=False)
    op.create_index(op.f('ix_upsell_offers_car_id'), 'upsell_offers', ['car_id'], unique=False)
    op.create_index(op.f('ix_upsell_offers_customer_id'), 'upsell_offers', ['customer_id'], unique=False)
    op.create_index(op.f('ix_upsell_offers_service_log_id'), 'upsell_offers', ['service_log_id'], unique=False)
    op.create_index(op.f('ix_upsell_offers_workshop_id'), 'upsell_offers', ['workshop_id'], unique=False)
    op.create_index('ix_upsell_workshop_status', 'upsell_offers', ['workshop_id', 'status'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_upsell_workshop_status', table_name='upsell_offers')
    op.drop_index(op.f('ix_upsell_offers_workshop_id'), table_name='upsell_offers')
    op.drop_index(op.f('ix_upsell_offers_service_log_id'), table_name='upsell_offers')
    op.drop_index(op.f('ix_upsell_offers_customer_id'), table_name='upsell_offers')
    op.drop_index(op.f('ix_upsell_offers_car_id'), table_name='upsell_offers')
    op.drop_index(op.f('ix_upsell_offers_booking_id'), table_name='upsell_offers')
    op.drop_index(op.f('ix_upsell_offers_approval_token'), table_name='upsell_offers')
    op.drop_table('upsell_offers')
    op.drop_table('booking_request_service_items')
    op.drop_table('workshopbay_vehicleclass')
    op.drop_index(op.f('ix_servicetasks_service_log_id'), table_name='servicetasks')
    op.drop_index(op.f('ix_servicetasks_id'), table_name='servicetasks')
    op.drop_index(op.f('ix_servicetasks_catalog_item_id'), table_name='servicetasks')
    op.drop_table('servicetasks')
    op.drop_index('ix_cc_customer', table_name='customer_cars')
    op.drop_index('ix_cc_car', table_name='customer_cars')
    op.drop_table('customer_cars')
    op.drop_index('ix_bookingreq_workshop_status_created', table_name='booking_requests')
    op.drop_index(op.f('ix_booking_requests_workshop_id'), table_name='booking_requests')
    op.drop_index(op.f('ix_booking_requests_service_item_id'), table_name='booking_requests')
    op.drop_index(op.f('ix_booking_requests_id'), table_name='booking_requests')
    op.drop_index(op.f('ix_booking_requests_customer_id'), table_name='booking_requests')
    op.drop_index(op.f('ix_booking_requests_created_at'), table_name='booking_requests')
    op.drop_index(op.f('ix_booking_requests_car_id'), table_name='booking_requests')
    op.drop_table('booking_requests')
    op.drop_index(op.f('ix_bayclosures_start_at'), table_name='bayclosures')
    op.drop_index(op.f('ix_bayclosures_id'), table_name='bayclosures')
    op.drop_index(op.f('ix_bayclosures_end_at'), table_name='bayclosures')
    op.drop_index('ix_bayclosure_bay_time', table_name='bayclosures')
    op.drop_table('bayclosures')
    op.drop_index(op.f('ix_baybookings_start_at'), table_name='baybookings')
    op.drop_index(op.f('ix_baybookings_service_item_id'), table_name='baybookings')
    op.drop_index(op.f('ix_baybookings_id'), table_name='baybookings')
    op.drop_index(op.f('ix_baybookings_end_at'), table_name='baybookings')
    op.drop_index(op.f('ix_baybookings_chain_token'), table_name='baybookings')
    op.drop_index('ix_baybooking_workshop_time', table_name='baybookings')
    op.drop_index('ix_baybooking_chain_token', table_name='baybookings')
    op.drop_index('ix_baybooking_bay_time', table_name='baybookings')
    op.drop_table('baybookings')
    op.drop_index(op.f('ix_workshopbays_id'), table_name='workshopbays')
    op.drop_index('ix_workshopbay_workshop', table_name='workshopbays')
    op.drop_table('workshopbays')
    op.drop_index(op.f('ix_workshop_service_items_workshop_id'), table_name='workshop_service_items')
    op.drop_index(op.f('ix_workshop_service_items_id'), table_name='workshop_service_items')
    op.drop_index('ix_service_item_workshop', table_name='workshop_service_items')
    op.drop_table('workshop_service_items')
    op.drop_table('vehicleprofiles')
    op.drop_table('user_workshop_association')
    op.drop_index('ix_uwh_user_weekday', table_name='user_working_hours')
    op.drop_index(op.f('ix_user_working_hours_user_id'), table_name='user_working_hours')
    op.drop_table('user_working_hours')
    op.drop_index('ix_user_timeoff_user_time', table_name='user_time_off')
    op.drop_index(op.f('ix_user_time_off_user_id'), table_name='user_time_off')
    op.drop_index(op.f('ix_user_time_off_start_at'), table_name='user_time_off')
    op.drop_index(op.f('ix_user_time_off_end_at'), table_name='user_time_off')
    op.drop_table('user_time_off')
    op.drop_index(op.f('ix_sms_messages_workshop_id'), table_name='sms_messages')
    op.drop_index(op.f('ix_sms_messages_to_phone'), table_name='sms_messages')
    op.drop_table('sms_messages')
    op.drop_index(op.f('ix_servicelogs_id'), table_name='servicelogs')
    op.drop_table('servicelogs')
    op.drop_index(op.f('ix_customers_workshop_id'), table_name='customers')
    op.drop_index(op.f('ix_customers_id'), table_name='customers')
    op.drop_index('ix_customer_workshop', table_name='customers')
    op.drop_table('customers')
    op.drop_index(op.f('ix_workshops_id'), table_name='workshops')
    op.drop_table('workshops')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_cars_id'), table_name='cars')
    op.drop_index('ix_car_regnr', table_name='cars')
    op.drop_table('cars')
    # ### end Alembic commands ###
